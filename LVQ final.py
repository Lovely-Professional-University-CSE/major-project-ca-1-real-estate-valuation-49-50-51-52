{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "##importing the libraries\n",
    "import pandas as pd\n",
    "import numpy as np"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "##reaind the dataset\n",
    "dataset = pd.read_excel('Real estate valuation data set.xlsx')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>No</th>\n",
       "      <th>X1 transaction date</th>\n",
       "      <th>X2 house age</th>\n",
       "      <th>X3 distance to the nearest MRT station</th>\n",
       "      <th>X4 number of convenience stores</th>\n",
       "      <th>X5 latitude</th>\n",
       "      <th>X6 longitude</th>\n",
       "      <th>Y house price of unit area</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>2012.916667</td>\n",
       "      <td>32.0</td>\n",
       "      <td>84.87882</td>\n",
       "      <td>10</td>\n",
       "      <td>24.98298</td>\n",
       "      <td>121.54024</td>\n",
       "      <td>37.9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>2012.916667</td>\n",
       "      <td>19.5</td>\n",
       "      <td>306.59470</td>\n",
       "      <td>9</td>\n",
       "      <td>24.98034</td>\n",
       "      <td>121.53951</td>\n",
       "      <td>42.2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>2013.583333</td>\n",
       "      <td>13.3</td>\n",
       "      <td>561.98450</td>\n",
       "      <td>5</td>\n",
       "      <td>24.98746</td>\n",
       "      <td>121.54391</td>\n",
       "      <td>47.3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>2013.500000</td>\n",
       "      <td>13.3</td>\n",
       "      <td>561.98450</td>\n",
       "      <td>5</td>\n",
       "      <td>24.98746</td>\n",
       "      <td>121.54391</td>\n",
       "      <td>54.8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>2012.833333</td>\n",
       "      <td>5.0</td>\n",
       "      <td>390.56840</td>\n",
       "      <td>5</td>\n",
       "      <td>24.97937</td>\n",
       "      <td>121.54245</td>\n",
       "      <td>43.1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   No  X1 transaction date  X2 house age  \\\n",
       "0   1          2012.916667          32.0   \n",
       "1   2          2012.916667          19.5   \n",
       "2   3          2013.583333          13.3   \n",
       "3   4          2013.500000          13.3   \n",
       "4   5          2012.833333           5.0   \n",
       "\n",
       "   X3 distance to the nearest MRT station  X4 number of convenience stores  \\\n",
       "0                                84.87882                               10   \n",
       "1                               306.59470                                9   \n",
       "2                               561.98450                                5   \n",
       "3                               561.98450                                5   \n",
       "4                               390.56840                                5   \n",
       "\n",
       "   X5 latitude  X6 longitude  Y house price of unit area  \n",
       "0     24.98298     121.54024                        37.9  \n",
       "1     24.98034     121.53951                        42.2  \n",
       "2     24.98746     121.54391                        47.3  \n",
       "3     24.98746     121.54391                        54.8  \n",
       "4     24.97937     121.54245                        43.1  "
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "##represention of the dataset\n",
    "dataset.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['No', 'X1 transaction date', 'X2 house age',\n",
       "       'X3 distance to the nearest MRT station',\n",
       "       'X4 number of convenience stores', 'X5 latitude', 'X6 longitude',\n",
       "       'Y house price of unit area'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "##columns for our our convinience\n",
    "dataset.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "## we are going to drop the column No and the X1 transaction date because we dont need that (it has no use right now)\n",
    "dataset.drop(['No', 'X1 transaction date'],inplace = True,axis = 1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>X2 house age</th>\n",
       "      <th>X3 distance to the nearest MRT station</th>\n",
       "      <th>X4 number of convenience stores</th>\n",
       "      <th>X5 latitude</th>\n",
       "      <th>X6 longitude</th>\n",
       "      <th>Y house price of unit area</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>32.0</td>\n",
       "      <td>84.87882</td>\n",
       "      <td>10</td>\n",
       "      <td>24.98298</td>\n",
       "      <td>121.54024</td>\n",
       "      <td>37.9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>19.5</td>\n",
       "      <td>306.59470</td>\n",
       "      <td>9</td>\n",
       "      <td>24.98034</td>\n",
       "      <td>121.53951</td>\n",
       "      <td>42.2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>13.3</td>\n",
       "      <td>561.98450</td>\n",
       "      <td>5</td>\n",
       "      <td>24.98746</td>\n",
       "      <td>121.54391</td>\n",
       "      <td>47.3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>13.3</td>\n",
       "      <td>561.98450</td>\n",
       "      <td>5</td>\n",
       "      <td>24.98746</td>\n",
       "      <td>121.54391</td>\n",
       "      <td>54.8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5.0</td>\n",
       "      <td>390.56840</td>\n",
       "      <td>5</td>\n",
       "      <td>24.97937</td>\n",
       "      <td>121.54245</td>\n",
       "      <td>43.1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   X2 house age  X3 distance to the nearest MRT station  \\\n",
       "0          32.0                                84.87882   \n",
       "1          19.5                               306.59470   \n",
       "2          13.3                               561.98450   \n",
       "3          13.3                               561.98450   \n",
       "4           5.0                               390.56840   \n",
       "\n",
       "   X4 number of convenience stores  X5 latitude  X6 longitude  \\\n",
       "0                               10     24.98298     121.54024   \n",
       "1                                9     24.98034     121.53951   \n",
       "2                                5     24.98746     121.54391   \n",
       "3                                5     24.98746     121.54391   \n",
       "4                                5     24.97937     121.54245   \n",
       "\n",
       "   Y house price of unit area  \n",
       "0                        37.9  \n",
       "1                        42.2  \n",
       "2                        47.3  \n",
       "3                        54.8  \n",
       "4                        43.1  "
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dataset.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "##basically we are redefining the dataset because the dataset which we have right now is not too big for the random weights \n",
    "## we can implement ont this weight to but the distnance between expected to right will be too much \n",
    "##so we are just converting all the answers to decimal points \n",
    "dataset['X2 house age'] = dataset['X2 house age']/100\n",
    "dataset['X3 distance to the nearest MRT station'] = dataset['X3 distance to the nearest MRT station']/1000\n",
    "dataset['X4 number of convenience stores'] = dataset['X4 number of convenience stores']/10\n",
    "dataset['X5 latitude'] = dataset['X5 latitude']/100\n",
    "dataset['X6 longitude'] = dataset['X6 longitude']/1000\n",
    "dataset['Y house price of unit area'] = dataset['Y house price of unit area']/100"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "## here we are going to rename all the columns (since for my convinience we are going to read the names again and again )\n",
    "dataset['X1'] = dataset['X2 house age']\n",
    "dataset['X2'] = dataset['X3 distance to the nearest MRT station']\n",
    "dataset['X3'] = dataset['X4 number of convenience stores']\n",
    "dataset['X4'] = dataset['X5 latitude']\n",
    "dataset['X5'] = dataset['X6 longitude']\n",
    "dataset['Y'] = dataset['Y house price of unit area']\n",
    "## we are dropthee columns because we have a copy in x1,x2 ..Xn\n",
    "dataset.drop(['X2 house age',\n",
    "       'X3 distance to the nearest MRT station',\n",
    "       'X4 number of convenience stores', 'X5 latitude', 'X6 longitude',\n",
    "       'Y house price of unit area'],axis =1 ,inplace = True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>X1</th>\n",
       "      <th>X2</th>\n",
       "      <th>X3</th>\n",
       "      <th>X4</th>\n",
       "      <th>X5</th>\n",
       "      <th>Y</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.320</td>\n",
       "      <td>0.084879</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.249830</td>\n",
       "      <td>0.121540</td>\n",
       "      <td>0.379</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.195</td>\n",
       "      <td>0.306595</td>\n",
       "      <td>0.9</td>\n",
       "      <td>0.249803</td>\n",
       "      <td>0.121540</td>\n",
       "      <td>0.422</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.133</td>\n",
       "      <td>0.561984</td>\n",
       "      <td>0.5</td>\n",
       "      <td>0.249875</td>\n",
       "      <td>0.121544</td>\n",
       "      <td>0.473</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0.133</td>\n",
       "      <td>0.561984</td>\n",
       "      <td>0.5</td>\n",
       "      <td>0.249875</td>\n",
       "      <td>0.121544</td>\n",
       "      <td>0.548</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0.050</td>\n",
       "      <td>0.390568</td>\n",
       "      <td>0.5</td>\n",
       "      <td>0.249794</td>\n",
       "      <td>0.121542</td>\n",
       "      <td>0.431</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      X1        X2   X3        X4        X5      Y\n",
       "0  0.320  0.084879  1.0  0.249830  0.121540  0.379\n",
       "1  0.195  0.306595  0.9  0.249803  0.121540  0.422\n",
       "2  0.133  0.561984  0.5  0.249875  0.121544  0.473\n",
       "3  0.133  0.561984  0.5  0.249875  0.121544  0.548\n",
       "4  0.050  0.390568  0.5  0.249794  0.121542  0.431"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "## this is how it looks after the alterations \n",
    "dataset.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [],
   "source": [
    "x = dataset.iloc[:,:-1].values\n",
    "y = dataset.iloc[:,-1:].values"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [],
   "source": [
    "## tthis changes is just the target clusters which clusters there data points belongs to. s\n",
    "## to cluster these we are not using any clustering algorithm but based on the husing price we are forming if ther going to buy house or not \n",
    "##so when we get house price more than 0.40 we say that a person is most likey to buy the house and we take 1 as output and if its less we say \n",
    "## a person will never buy the house sincce the price is too less or too much (we did oppositer ifthe price is too muv(greater than 0.40 ))\n",
    "## a peron is going to buy and if its less hes not \n",
    "changes = []\n",
    "for p in y:\n",
    "    if(p>0.40):\n",
    "        changes.append(1)\n",
    "    else:\n",
    "        changes.append(0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [],
   "source": [
    "##initializing the weights\n",
    "weights = np.random.uniform(size = (5,2))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[0.55941709, 0.13690681],\n",
       "       [0.55757108, 0.12681457],\n",
       "       [0.07699759, 0.50865671],\n",
       "       [0.88400931, 0.17172644],\n",
       "       [0.42105741, 0.34292835]])"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#these are just soe random weights\n",
    "##weights"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Updated weights :\n",
      " [[ 0.55941709 -0.29793951]\n",
      " [ 0.55757108  0.22641198]\n",
      " [ 0.07699759 -0.65828359]\n",
      " [ 0.88400931 -0.01376904]\n",
      " [ 0.42105741  0.34292835]]\n",
      "Updated weights :\n",
      " [[ 0.55941709 -0.05146976]\n",
      " [ 0.55757108  0.26650334]\n",
      " [ 0.07699759  0.1208582 ]\n",
      " [ 0.88400931  0.11801718]\n",
      " [ 0.42105741  0.34292835]]\n",
      "Updated weights :\n",
      " [[0.55941709 0.04076512]\n",
      " [0.55757108 0.41424392]\n",
      " [0.07699759 0.3104291 ]\n",
      " [0.88400931 0.18394589]\n",
      " [0.42105741 0.34292835]]\n",
      "Updated weights :\n",
      " [[0.55941709 0.08688256]\n",
      " [0.55757108 0.48811421]\n",
      " [0.07699759 0.40521455]\n",
      " [0.88400931 0.21691024]\n",
      " [0.42105741 0.34292835]]\n",
      "Updated weights :\n",
      " [[0.55941709 0.06844128]\n",
      " [0.55757108 0.43934131]\n",
      " [0.07699759 0.45260728]\n",
      " [0.88400931 0.23335197]\n",
      " [0.42105741 0.34292835]]\n",
      "Updated weights :\n",
      " [[ 0.55941709  0.06716192]\n",
      " [ 0.55757108 -0.42850304]\n",
      " [ 0.07699759  0.52891091]\n",
      " [ 0.88400931  0.22521271]\n",
      " [ 0.42105741  0.34292835]]\n",
      "Updated weights :\n",
      " [[0.55941709 0.20608096]\n",
      " [0.55757108 0.09748503]\n",
      " [0.07699759 0.61445546]\n",
      " [0.88400931 0.237503  ]\n",
      " [0.42105741 0.34292835]]\n",
      "Updated weights :\n",
      " [[0.55941709 0.20454048]\n",
      " [0.55757108 0.19254376]\n",
      " [0.07699759 0.60722773]\n",
      " [0.88400931 0.2436536 ]\n",
      " [0.42105741 0.34292835]]\n",
      "Updated weights :\n",
      " [[ 0.55941709  0.14831072]\n",
      " [ 0.55757108 -2.46720335]\n",
      " [ 0.07699759  0.86084159]\n",
      " [ 0.88400931  0.24072565]\n",
      " [ 0.42105741  0.34292835]]\n",
      "Updated weights :\n",
      " [[ 0.55941709  0.13296608]\n",
      " [ 0.55757108 -4.59239503]\n",
      " [ 0.07699759  1.14126239]\n",
      " [ 0.88400931  0.23625193]\n",
      " [ 0.42105741  0.34292835]]\n"
     ]
    }
   ],
   "source": [
    "##LQ is simply just as process of identifying patterns in your data points\n",
    "## the algorithm for LVQ is such that \n",
    "##   weights initialization\n",
    "##   find the distnce (x-w)^2\n",
    "## choose the minimum weights which is neareer to the cluster and\n",
    "## mover the weight to that cluster\n",
    "l = []\n",
    "lrate = 0.5\n",
    "for i in range(10):\n",
    "    \n",
    "    for j in range(2):\n",
    "        temporary = 0\n",
    "        for k in range(5):\n",
    "            ##findind sum\n",
    "            temporary = temporary + (weights[k,j]-x[i,k])**2\n",
    "        l.append(temporary)\n",
    "    j=0\n",
    "    \n",
    "    if(l[0]<[1]):\n",
    "        j=0\n",
    "    else:\n",
    "        j=1\n",
    "        \n",
    "    ##checking if ther math the target\n",
    "    if(j==changes[i]):\n",
    "        ##if yes\n",
    "        for m in range(4):\n",
    "            \n",
    "            weights[m,j]=weights[m,j] + (lrate *(x[i,m]-weights[m,j]))\n",
    "    else:\n",
    "        ##else\n",
    "        for m in range(4):\n",
    "            weights[m,j]=weights[m,j] - (lrate *(x[i,m]-weights[m,j]))\n",
    "    print('Updated weights :\\n',weights)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
